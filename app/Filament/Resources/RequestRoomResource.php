<?php

namespace App\Filament\Resources;

use App\Filament\Resources\RequestRoomResource\Pages;
use App\Infolists\Components\EventDescription;
use App\Models\Calendar;
use App\Models\RequestRoom;
use Carbon\Carbon;
use Filament\Actions\Action;
use Filament\Forms\Form;
use Filament\Infolists\Components\Actions;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Support\Enums\FontWeight;
use Filament\Support\Enums\VerticalAlignment;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;
use PHPUnit\Metadata\Group;

class RequestRoomResource extends Resource
{
    protected static ?string $model = RequestRoom::class;

    protected static ?string $navigationIcon = 'heroicon-o-document';

    protected static ?string $activeNavigationIcon = 'heroicon-s-document';

    protected static ?int $navigationSort = 4;

    public static function canDelete(Model $record): bool
    {
        return false;
    }
    public static function canEdit(Model $record): bool
    {
        return false; // TODO: Change the autogenerated stub
    }

    public static function canDeleteAny(): bool
    {
        return false; // TODO: Change the autogenerated stub
    }
    public static function canCreate(): bool
    {
        return false; // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                //
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('title')
                    ->weight(FontWeight::Bold)
                    ->label('Event Name')
                    ->description(fn(RequestRoom $record):string => $record->description)
                    ->sortable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('user.nickname')
                    ->label('Nickname')
                    ->badge()
                    ->color(fn($state) => match ($state) {
                        'SL', 'AC', 'GA', 'MPM' => 'success',
                        'HMPSSI', 'HMPSIF', 'HMPSH',
                        'BEM', 'HMPSA', 'HMPSM'=> 'warning',
                        default => 'gray'
                    })->sortable()
                    ->alignCenter(),
                Tables\Columns\TextColumn::make('end')
                    ->label('Event Scheduled')
                    ->sortable()
                    ->formatStateUsing(function ($record) {
                        $start = Carbon::parse($record->start)->startOfDay();
                        $end = Carbon::parse($record->end)->endOfDay();

                        if ($start->isSameDay($end)) {
                            $hours = Carbon::parse($record->start)->diffInHours($record->end);
                            $duration = "($hours Hours)";
                        } else {
                            $startTime = Carbon::parse($record->start);
                            $endTime = Carbon::parse($record->end);
                            $days = $startTime->diffInDays($endTime) + 1;
                            $formatted = number_format($days, 0);
                            $duration = "({$formatted} Days)";
                        }
                        return  $start->format('d M Y') . ' ' . $duration;
                    }),
                    Tables\Columns\TextColumn::make('status')
                        ->badge()
                        ->color(fn($state) => match ($state) {
                            "pending" => 'warning',
                            "approved" => 'success',
                            "rejected" => 'danger',
                            default => 'gray'
                        })
                        ->label('Status')
                        ->formatStateUsing(fn (string $state) => ucfirst($state))
                        ->sortable()
                        ->searchable()
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\ViewAction::make()
                    ->hiddenLabel()
            ]);
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist->inlineLabel()
            ->schema([
                \Filament\Infolists\Components\Group::make([
                    TextEntry::make('title')
                        ->label('Event Name')
                        ->size('4xl'),
                    TextEntry::make('start')
                        ->label('Event Schedule')
                        ->formatStateUsing(function ($record) {
                            $start = Carbon::parse($record->start)->startOfDay();
                            $end = Carbon::parse($record->end)->endOfDay();

                            if ($start->isSameDay($end)) {
                                $hours = Carbon::parse($record->start)->diffInHours($record->end);
                                $duration = "($hours Hours)";
                            } else {
                                $startTime = Carbon::parse($record->start);
                                $endTime = Carbon::parse($record->end);
                                $days = $startTime->diffInDays($endTime) + 1;
                                $formatted = number_format($days, 0);
                                $duration = "({$formatted} Days)";
                            }
                            return $start->format('d M Y') . ' ' . $duration;
                        }),
                    EventDescription::make('description')
                        ->columnSpanFull()
                        ->maxLength(20)
                        ->label('Event Description'),
                ])->columnSpanFull(),
                \Filament\Infolists\Components\Group::make([
                    Actions::make([
                        Actions\Action::make('Reject')
                            ->color('danger')
                            ->visible(function (RequestRoom $record) {
                                return $record->status === 'pending';})
                            ->action(function (RequestRoom $record) {
                                $record->status = 'rejected';
                                $record->save();
                                Notification::make()
                                    ->title('Successfully  Rejected')
                                    ->success()
                                    ->body('Request status set to rejected.')
                                    ->send();
                            }),
                        Actions\Action::make('Approve')
                            ->color('warning')
                            ->visible(function (RequestRoom $record) {
                                return $record->status === 'pending';})
                            ->action(function (RequestRoom $record) {
                                $record->status = 'approved';
                                $record->save();
                                $errorMessage = self::createCalendar($record);
                                if ($errorMessage) {
                                    Notification::make()
                                        ->title('Approval Failed')
                                        ->danger()
                                        ->body("Error: {$errorMessage}")
                                        ->send();
                                } else {
                                    $record->status = 'approved';
                                    $record->save();
                                    Notification::make()
                                        ->title('Successfully Approved')
                                        ->success()
                                        ->body('Event status set to approved.')
                                        ->send();
                                }
                            }),
                    ])->fullWidth()->columns(2)
                ])->columns(2),
            ]);
    }
    static function createCalendar($booking)
    {
        try {
            DB::transaction(function () use ($booking) {
                foreach ($booking->rooms as $room) {
                    $calendarItem = [
                        'booking_id' => $booking->id,
                        'title' => $booking->title,
                        'start' => $booking->start,
                        'end' => $booking->end,
                        'room_id' => $room->id,
                    ];
                    Calendar::create($calendarItem);
                }
            });
            return null;
        } catch (\Exception $e) {
            return $e->getMessage();
        }
    }
    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListRequestRooms::route('/'),
            'create' => Pages\CreateRequestRoom::route('/create'),
            'edit' => Pages\EditRequestRoom::route('/{record}/edit'),
        ];
    }
}
